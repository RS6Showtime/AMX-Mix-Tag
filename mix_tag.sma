/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>

#define PLUGIN "MIX TAG"
#define VERSION "1.0"
#define AUTHOR "AMG"

//#pragma semicolon 1

/* Concmd Name for Message Mod And Function */

#define CONCMD_T "TerroistTAG"
#define CONCMD_CT "CounterTerroristTAG"

/* End */

/* Colors Chat Keys */

#define TAG "MIX-TAG"
#define MES_INPUT_TAG "Please Input An Argument For This Tag"
#define ADMIN_EXECUTE "ADMIN !g%s !tEXECUTED THE TAG"
#define ADMIN_RESET "ADMIN !g%s !tRESETTED ALL THE TAG"
#define ADMIN_EXECUTED "This Option Was Aleardy Executed"
#define DEFAULT_TAG_T "Team1"
#define DEFAULT_TAG_CT "Team2"

/* End */

new NickName[33][33];
new OriginNickName[33][33];
new TagT[33];
new TagCT[33];
new bool: Executed = false;

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR);
	register_clcmd("say /tag", "function_tag_menu");
	register_concmd("amx_tag", "function_tag_menu");
	
	register_forward(FM_ClientUserInfoChanged, "function_change_info");
	
	register_concmd(CONCMD_T, "TerroistTAG");
	register_concmd(CONCMD_CT, "CounterTerrositTAG");
}

/* TAG MENU */

public function_tag_menu(id) {
	if(!access(id, ADMIN_IMMUNITY)) return 1;
	new menu = menu_create("\rInsert Custom Tag", "function_handler_menu");
	
	new Temp[48];
	
	menu_additem(menu, "\rExit", "");
	menu_addblank(menu, -1);
	
	formatex(Temp, sizeof(Temp)-1, "\rTeam \y[\rT\y] \w= \y[\r%s\y]", strlen(TagT) == 0 ? "Empty" : TagT);
	menu_additem(menu, Temp, "");
	formatex(Temp, sizeof(Temp)-1, "\rTeam \y[\rCT\y] \w= \y[\r%s\y]", strlen(TagCT) == 0 ? "Empty" : TagCT);
	menu_additem(menu, Temp, "");
	
	menu_addblank(menu, -1);
	
	if(strlen(TagT) + strlen(TagCT) != 0) {
		menu_additem(menu, "\rExecute", "");
		
		menu_addblank(menu, -1);
		
	}
	if(Executed)
	menu_additem(menu, "\rReset", ""); 
	
	menu_setprop(menu, MPROP_EXIT, MEXIT_NEVER);
	menu_setprop(menu, MPROP_NUMBER_COLOR, "\y");
	menu_display(id, menu, 0);
	return 1;
}

public function_handler_menu (id, menu, item) {
	switch(item) {
		case 1: {
			culoare(id, "!g[!t%s!g] !t%s", TAG, MES_INPUT_TAG);
			client_cmd(id, "messagemode " + CONCMD_T);
		}
		case 2: {
			culoare(id, "!g[!t%s!g] !t%s", TAG, MES_INPUT_TAG);
			client_cmd(id, "messagemode " + CONCMD_CT);
		}
		case 3: {
			if(!Executed) {
				culoare(0, "!g[!t%s!g] !t%s", TAG , ADMIN_EXECUTE, NickName[id]);
				
				new Players[32], num, target;
				get_players(Players, num);
				
				for(new i = 0; i < num; i++) {
					target = Players[i];
					if(is_user_connected(target)) {
						new Team = get_user_team(target);
						new Temp[48];
						switch(Team) 
						{
						case 1: {
							OriginNickName[target] = NickName[target];
							formatex(Temp, sizeof(Temp)-1, "%s %s", TagT, NickName[target]);
							set_user_info(target, "name" , Temp);
							}
						case 2: {
							OriginNickName[target] = NickName[target];
							formatex(Temp, sizeof(Temp)-1, "%s %s", TagCT, NickName[target]);
							set_user_info(target, "name" , Temp);
							}
						}
					}
				}
				Executed = true;
			} else culoare(id, "!g[!t%s!g] !t%s", TAG, ADMIN_EXECUTED);
		}
		case 4: {
			culoare(0, "!g[!t%s!g] !t%s", TAG , ADMIN_RESET, NickName[id]);
			
			new Players[32], num, target;
			get_players(Players, num);
			
			for(new i = 0; i < num; i++) {
				target = Players[i];
				if(is_user_connected(target)) {
					new Team = get_user_team(target);
					switch(Team) 
					{
					case 1: set_user_info(target, "name" , OriginNickName[target]);
						
					case 2: set_user_info(target, "name" , OriginNickName[target]);
					}
				}
			}
			Executed = false;
		}
		
	}
	menu_destroy(menu);
	return 1;
}

/* End */

/* Message Mod */

public TerroistTAG(id) {
	read_args(TagT, 32);
	remove_quotes(TagT);
	function_tag_menu(id);
}

public CounterTerrositTAG(id) {
	read_args(TagCT, 32);
	remove_quotes(TagCT);
	function_tag_menu(id);
}

/* End */

/* Change Name Or Admin Executed The Tag */

public function_change_info(id, buffer){
	if(is_user_connected(id)) {
		new oldname[32], newname[32];
		get_user_name(id, oldname, sizeof oldname - 1);
		engfunc(EngFunc_InfoKeyValue, buffer, "name", newname, sizeof newname - 1);
		if (equal(newname, oldname))
			return FMRES_IGNORED;
		NickName[id] = newname;
		if(is_user_connected(id) && (!equal(newname, oldname)) && Executed) {
			new structure[32], Team = get_user_team(id);
			switch(Team) 
			{
			case 1: {
				formatex(structure, sizeof(structure)-1, "%s ", TagT);
				}
			case 2: {
				formatex(structure, sizeof(structure)-1, "%s ", TagCT);
				}
			}
			replace_all(newname, sizeof(newname)-1, structure, "");
			NickName[id] = newname;
			new UserName[33];
			formatex(UserName, 32, "%s%s", structure, NickName[id]);
			set_user_info(id, "name", UserName);
			formatex(UserName, 32, "%s", NickName[id]);
			OriginNickName[id] = UserName;
			return FMRES_SUPERCEDE;
		}
		return FMRES_SUPERCEDE;
	}
	return FMRES_IGNORED;
}


/* End */

/* Players StartUp */

public client_putinserver(id) {
	get_user_name(id ,NickName[id], sizeof(NickName)-1); 
}

/* 
  Making it Available for 1.8.2 
	And So on... 
*/

#if AMXX_VERSION_NUM >= 183
public client_disconnected(id) {
#else
public client_disconnect(id) {
#endif
	set_user_info(id, "name", OriginNickName[id]);
}

/* End */

/* Stocks */

stock culoare (const id, const input[], any:...) 
{
	new count = 1, players[ 32 ];
	static msg[ 191 ];
	vformat( msg, 190, input, 3 );
   
	replace_all( msg, 190, "!g", "^4" );
	replace_all( msg, 190, "!y", "^1" );
	replace_all( msg, 190, "!t2", "^2" );
	replace_all( msg, 190, "!t", "^3" );

   
	if(id) players[ 0 ] = id; else get_players( players, count, "ch" );
	{
		for(new i = 0; i < count; i++)
		{
			if( is_user_connected( players[ i ] ) )
			{
				message_begin( MSG_ONE_UNRELIABLE, get_user_msgid("SayText"), _, players[ i ] );
				write_byte( players[ i ] );
				write_string( msg );
				message_end( );
			}
		}
	}
}

/* End */
